apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "argocd-unifi.fullname" . }}
  labels:
    {{- include "argocd-unifi.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.controllers.main.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "argocd-unifi.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "argocd-unifi.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      initContainers:
        - name: fix-permissions
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              chown -R 1000:1000 /config
              chmod -R 755 /config
              # Create necessary directories
              mkdir -p /config/data /config/logs /config/run
              chown -R 1000:1000 /config/data /config/logs /config/run
              
              # Handle UniFi data directory - remove existing and create symlink
              rm -rf /usr/lib/unifi/data
              ln -sf /unifi-data /usr/lib/unifi/data
              chown -R 1000:1000 /unifi-data
              chmod -R 755 /unifi-data
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: config
              mountPath: /config
            - name: data
              mountPath: /unifi-data
        - name: fix-mongodb-permissions
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              # Create MongoDB directory structure
              mkdir -p /data/db/journal
              mkdir -p /data/db/logs
              # Set ownership and permissions for MongoDB
              chown -R 999:999 /data/db
              chmod -R 755 /data/db
              # Remove stale lock files if they exist
              rm -f /data/db/mongod.lock
              rm -f /data/db/WiredTiger.lock
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
      containers:
        - name: mongodb
          image: "mongo:7.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 999
            runAsGroup: 999
          command: ["mongod"]
          args: 
            - "--bind_ip_all"
            - "--auth"
            - "--dbpath=/data/db"
            - "--logpath=/data/db/logs/mongodb.log"
            - "--logappend"
          env:
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-database
                  key: database
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-password
                  key: password
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-username
                  key: username
          ports:
            - name: mongodb
              containerPort: 27017
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          lifecycle:
            preStop:
              exec:
                command: ["mongod", "--shutdown"]
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
              readOnly: false
        - name: unifi
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: TZ
              value: "UTC"
            - name: MEM_LIMIT
              value: "1024"
            - name: MEM_STARTUP
              value: "1024"
            - name: MONGO_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-username
                  key: username
            - name: MONGO_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-password
                  key: password
            - name: MONGO_DBNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "argocd-unifi.fullname" . }}-mongo-database
                  key: database
            - name: MONGO_HOST
              value: "localhost"
            - name: MONGO_PORT
              value: "27017"
            - name: MONGO_AUTHSOURCE
              value: "admin"
            - name: UNIFI_DATA_DIR
              value: "/unifi-data"
          ports:
            {{- range $name, $config := .Values.service.ports }}
            - name: {{ $name }}
              containerPort: {{ $config.port }}
              protocol: {{ $config.protocol }}
            {{- end }}
          {{- with .Values.controllers.main.containers.main.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}          
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: false
            - name: data
              mountPath: /unifi-data
              readOnly: false
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: {{ include "argocd-unifi.fullname" . }}-config
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "argocd-unifi.fullname" . }}-data
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: {{ include "argocd-unifi.fullname" . }}-mongodb-data